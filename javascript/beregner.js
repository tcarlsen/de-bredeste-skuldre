if (window.onload) {
  var _existing = window.onload;
  window.onload = function () {
    _existing();
    Beregner_init();
  };
} else {
  window.onload = Beregner_init;
}

function VisInputForm(num, fixed) {
  document.getElementById("form").style.display = "block";
  document.getElementById("dbs-header").style.display = "block";
  document.getElementById("dbs-desc").style.display = "block";
  document.getElementById("udfold").style.display = "none";
  document.getElementById("result").style.display = "none";

  location.hash = "#dbs-top";
}

function Beregner_init() {
  document.getElementById("estimat_indkomst50").innerHTML = IndkomstText();
  document.getElementById("pensionsAlder2").innerHTML = PensionsText(-55555);
  Radio(1);  //default = midterste radio-button
}

function ToFixed(num, fixed) {
  fixed = fixed || 0;
  fixed = Math.pow(10, fixed);
  return Math.round(num * fixed) / fixed;
}

function FormatNumber(num) {
  return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.");
}

function Fordel(a1, a2, tillaeg, values) {
  var sum = 0;
  for (var i = a1; i <= a2; i++) {
    sum += values[i];
  }
  if (sum == 0) //f.eks. hvis values er fuld af 0'er
  {
    for (var i = a1; i <= a2; i++) {
      values[i] += tillaeg / (a2 - a1 + 1);
    }
  } else {
    for (var i = a1; i <= a2; i++) {
      var factor = tillaeg / sum;
      if (factor < -1) factor = -1; //for safety to ensure positive values
      values[i] = (1 + factor) * values[i];
    }
  }
  return;
}

function Skat(indkomst) {
  var besk_fradrag = Math.min(indkomst * 7.65 / 100, 25000);
  var pers_indk = (1 - 8 / 100) * indkomst;
  var skattepl_indk = pers_indk - besk_fradrag;
  var kommuneskat = Math.max(24.907 / 100 * (skattepl_indk - 42800), 0);
  var sundhedskat = Math.max(5.00 / 100 * (skattepl_indk - 42800), 0);
  var bundskat = Math.max(6.83 / 100 * (pers_indk - 42800), 0);
  var topskat = Math.max(14.96 / 100 * (pers_indk - 449100), 0);
  var arbmkdbidrag = 0.08 * indkomst;
  var indkskat = kommuneskat + sundhedskat + bundskat + topskat;
  var skat_ialt = indkskat + arbmkdbidrag;
  return skat_ialt;
}

//fra a til og med b
function Gsnit(a, b, x) {
  var sum = 0;
  for (var i = a; i <= b; i++) {
    sum += x[i];
  }
  return sum / (b - a + 1);
}

function Parametre(frm) {
  var alder = document.getElementById("alder").selectedIndex;
  var ledig_syg = document.getElementById("ledig_syg").selectedIndex;
  var udland1 = document.getElementById("udland1").selectedIndex;
  var udland2 = document.getElementById("udland2").selectedIndex;
  var koen = document.getElementById("select1").selectedIndex;
  var hf = document.getElementById("select2").selectedIndex;
  var pensionsAlder = 60 + document.getElementById("pensionsAlder").selectedIndex;
  var indkomst50 = Number.NaN;
  if(!IsDigits(frm.indkomst50.value.trim())) {
    indkomst50 = -55555;
  }
  else {
    indkomst50 = parseInt(frm.indkomst50.value);
  }
  var radio = 0;
  if (document.getElementById("radio0").checked) radio = 0;
  else if (document.getElementById("radio1").checked) radio = 1;
  else if (document.getElementById("radio2").checked) radio = 2;
  var nettobidrag = Beregn(koen, alder, hf, indkomst50, ledig_syg, udland1, udland2, pensionsAlder, radio, 1);
  return;
}

function IsDigits(val) {
  var isnum = /^\d+$/.test(val);
  return isnum;
}

function IndkomstText() {
  return "<p>Indkomsten skal angives i dagens kroner, dvs. svarende til 2014-prisniveau.</p>";  
}

function PensionsText(alder) {
  //0 til 77 inklusive
  if(alder == -55555) return "";
  var pa = Number.NaN;
  var x = [75,75,75,75,75,75,75,75,75,74,74,74,74,74,74,74,74,74,73,73,73,73,73,73,73,73,73,72,72,72,72,72,72,72,72,72,71,71,71,71,70,70,70,70,69,69,69,69,68,68,68,68,67,67,67,67,67,67,67,66,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65];
  if(alder > 77) pa = 67;
  else pa = x[alder];
  var s = "";
  if(alder < 60) s = " (jf. tilbagetrækningsreformen)";
  return "<p>Ud fra din alder forventes din pensionsalder at være omkring: " + pa + " år" + s + "</p>";
}

function Radio(radio) {
  var s = "";
  if(radio == 0) {
    s = "Indtast dernæst din forventede månedlige lønindkomst (inkl. pension, bonus m.v.), når du er færdig:"
  }
  else if(radio == 1) {
    s = "Indtast dernæst din nuværende (eller seneste) månedlige lønindkomst (inkl. pension, bonus m.v.):";
  }
  else {
    s = "Indtast dernæst din maksimale månedlige lønindkomst i løbet af dit arbejdsliv (inkl. pension, bonus m.v.):"
  }
  document.getElementById("indkomst_text2").innerHTML = s;
}

function Parametre2(frm) {
  var alder = document.getElementById("alder").selectedIndex;
  document.getElementById("estimat_indkomst50").innerHTML = IndkomstText();
  document.getElementById("pensionsAlder2").innerHTML = PensionsText(alder);
  return y;
}


function Beregn(koen, alder, hf, indkomst50, ledig_syg1, udland1, udland2, pensionsAlder, radio, output) {

  // -----------------------------------------------------------
  // Inputparametre
  // -----------------------------------------------------------
  //koen       0-1
  //alder      år
  //hf         0-7
  //indk50     månedlig indkomst
  //ledig_syg1  antal år
  //udland1    antal år
  //udland2    antal år

  // -----------------------------------------------------------
  // Parametre, faste
  // -----------------------------------------------------------
  var omkVedLedighedPrAar = 111989;
  var omkVedSUPrAar = 36783;
  var omkVedFolkepensionPrAar = Number.NaN;
  var SUFribeloebPrAar1 = 12 * 7428;
  var SUFribeloebPrAar2 = 12 * 10701;
  var pensionsBidrag = Number.NaN;
  var maxLevealder = Number.NaN;

  // -----------------------------------------------------------
  // Data
  // -----------------------------------------------------------
  var _aMax = 100;
  var _brug_kalibrering = 1;
  var indkomst50prAar = 12 * indkomst50;

  var fejltext = "";

  var bf_m_skole = [0.415, 0.487, 0.528, 0.500, 0.485, 0.490, 0.519, 0.527, 0.543, 0.554, 0.553, 0.557, 0.558, 0.576, 0.563, 0.573, 0.566, 0.602, 0.596, 0.619, 0.616, 0.638, 0.655, 0.666, 0.680, 0.674, 0.664, 0.651, 0.652, 0.661, 0.671, 0.671, 0.669, 0.674, 0.674, 0.682, 0.679, 0.680, 0.653, 0.648, 0.632, 0.611, 0.512, 0.471, 0.408, 0.372, 0.349, 0.276, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_skole = [0.465, 0.504, 0.460, 0.430, 0.415, 0.402, 0.387, 0.362, 0.371, 0.372, 0.371, 0.369, 0.367, 0.370, 0.385, 0.373, 0.402, 0.425, 0.443, 0.451, 0.477, 0.481, 0.502, 0.526, 0.544, 0.531, 0.535, 0.535, 0.555, 0.563, 0.559, 0.568, 0.585, 0.587, 0.604, 0.614, 0.625, 0.629, 0.605, 0.617, 0.601, 0.572, 0.394, 0.320, 0.252, 0.208, 0.172, 0.119, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_almgym = [1.000, 0.656, 0.617, 0.567, 0.571, 0.599, 0.599, 0.623, 0.625, 0.646, 0.665, 0.641, 0.663, 0.691, 0.730, 0.682, 0.711, 0.732, 0.741, 0.738, 0.736, 0.747, 0.763, 0.753, 0.728, 0.770, 0.755, 0.762, 0.773, 0.785, 0.748, 0.753, 0.755, 0.758, 0.733, 0.747, 0.756, 0.744, 0.735, 0.728, 0.706, 0.706, 0.643, 0.612, 0.559, 0.481, 0.465, 0.392, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_almgym = [1.000, 0.702, 0.681, 0.650, 0.661, 0.652, 0.633, 0.604, 0.564, 0.522, 0.528, 0.485, 0.492, 0.517, 0.499, 0.524, 0.562, 0.583, 0.588, 0.591, 0.587, 0.613, 0.639, 0.671, 0.667, 0.704, 0.711, 0.728, 0.748, 0.742, 0.720, 0.721, 0.703, 0.728, 0.717, 0.699, 0.693, 0.705, 0.690, 0.684, 0.667, 0.655, 0.584, 0.498, 0.451, 0.385, 0.354, 0.279, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_erhgym = [1.000, 0.638, 0.650, 0.613, 0.636, 0.659, 0.680, 0.693, 0.714, 0.750, 0.756, 0.753, 0.754, 0.783, 0.798, 0.787, 0.807, 0.829, 0.852, 0.859, 0.871, 0.892, 0.875, 0.885, 0.872, 0.860, 0.876, 0.874, 0.890, 0.865, 0.900, 0.869, 0.878, 0.872, 0.857, 0.864, 0.817, 0.820, 0.825, 0.823, 0.772, 0.801, 0.714, 0.732, 0.685, 0.577, 0.500, 0.448, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_erhgym = [1.000, 0.749, 0.751, 0.723, 0.725, 0.704, 0.681, 0.669, 0.622, 0.604, 0.576, 0.585, 0.628, 0.574, 0.662, 0.639, 0.670, 0.671, 0.763, 0.801, 0.821, 0.849, 0.857, 0.861, 0.877, 0.879, 0.876, 0.907, 0.894, 0.897, 0.889, 0.899, 0.870, 0.879, 0.863, 0.880, 0.799, 0.816, 0.760, 0.755, 0.753, 0.685, 0.643, 0.697, 0.506, 0.407, 0.366, 0.336, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_erhvfagl = [1.000, 1.000, 0.704, 0.723, 0.748, 0.766, 0.781, 0.803, 0.816, 0.828, 0.839, 0.849, 0.850, 0.860, 0.863, 0.863, 0.867, 0.871, 0.876, 0.881, 0.872, 0.870, 0.877, 0.869, 0.867, 0.864, 0.861, 0.863, 0.866, 0.859, 0.852, 0.854, 0.847, 0.847, 0.839, 0.834, 0.827, 0.822, 0.820, 0.798, 0.784, 0.773, 0.684, 0.632, 0.527, 0.452, 0.407, 0.315, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_erhvfagl = [1.000, 1.000, 0.641, 0.674, 0.701, 0.699, 0.677, 0.675, 0.660, 0.656, 0.649, 0.651, 0.648, 0.664, 0.692, 0.704, 0.720, 0.737, 0.751, 0.765, 0.783, 0.791, 0.809, 0.815, 0.818, 0.820, 0.828, 0.838, 0.837, 0.837, 0.830, 0.829, 0.832, 0.831, 0.823, 0.816, 0.812, 0.801, 0.786, 0.778, 0.753, 0.733, 0.595, 0.517, 0.392, 0.319, 0.265, 0.186, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_kortvidereg = [1.000, 1.000, 1.000, 1.000, 0.643, 0.703, 0.740, 0.753, 0.821, 0.846, 0.843, 0.851, 0.886, 0.894, 0.894, 0.920, 0.916, 0.913, 0.912, 0.931, 0.924, 0.921, 0.919, 0.922, 0.905, 0.912, 0.906, 0.902, 0.896, 0.891, 0.887, 0.890, 0.887, 0.882, 0.880, 0.873, 0.865, 0.874, 0.860, 0.830, 0.838, 0.824, 0.784, 0.717, 0.626, 0.525, 0.499, 0.412, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_kortvidereg = [1.000, 1.000, 1.000, 1.000, 0.675, 0.701, 0.733, 0.707, 0.716, 0.705, 0.708, 0.679, 0.652, 0.683, 0.699, 0.741, 0.752, 0.777, 0.790, 0.806, 0.818, 0.836, 0.850, 0.855, 0.851, 0.855, 0.850, 0.853, 0.865, 0.852, 0.859, 0.864, 0.856, 0.860, 0.834, 0.850, 0.840, 0.841, 0.806, 0.816, 0.820, 0.793, 0.680, 0.624, 0.478, 0.429, 0.359, 0.255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_mellemvidereg = [1.000, 1.000, 1.000, 1.000, 1.000, 0.663, 0.789, 0.780, 0.813, 0.842, 0.864, 0.886, 0.888, 0.905, 0.912, 0.914, 0.918, 0.915, 0.923, 0.930, 0.927, 0.928, 0.921, 0.930, 0.926, 0.918, 0.915, 0.913, 0.914, 0.911, 0.900, 0.895, 0.899, 0.889, 0.895, 0.888, 0.889, 0.880, 0.875, 0.873, 0.859, 0.856, 0.773, 0.742, 0.632, 0.549, 0.514, 0.407, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_mellemvidereg = [1.000, 1.000, 1.000, 1.000, 1.000, 0.765, 0.756, 0.774, 0.757, 0.744, 0.719, 0.713, 0.719, 0.725, 0.738, 0.759, 0.784, 0.799, 0.826, 0.841, 0.851, 0.859, 0.875, 0.884, 0.891, 0.892, 0.897, 0.897, 0.900, 0.897, 0.895, 0.891, 0.887, 0.894, 0.884, 0.883, 0.880, 0.868, 0.857, 0.854, 0.844, 0.823, 0.697, 0.623, 0.486, 0.375, 0.318, 0.215, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_bachelor = [1.000, 1.000, 1.000, 1.000, 1.000, 0.604, 0.609, 0.624, 0.631, 0.619, 0.668, 0.707, 0.732, 0.774, 0.798, 0.800, 0.812, 0.847, 0.848, 0.849, 0.843, 0.853, 0.877, 0.873, 0.857, 0.860, 0.840, 0.836, 0.873, 0.828, 0.842, 0.850, 0.793, 0.838, 0.844, 0.824, 0.848, 0.835, 0.824, 0.810, 0.840, 0.762, 0.747, 0.689, 0.566, 0.561, 0.431, 0.416, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_bachelor = [1.000, 1.000, 1.000, 1.000, 1.000, 0.669, 0.651, 0.637, 0.599, 0.570, 0.566, 0.538, 0.556, 0.589, 0.624, 0.643, 0.639, 0.660, 0.682, 0.712, 0.759, 0.772, 0.800, 0.819, 0.825, 0.824, 0.870, 0.858, 0.835, 0.848, 0.834, 0.793, 0.824, 0.833, 0.793, 0.834, 0.805, 0.831, 0.802, 0.789, 0.752, 0.770, 0.716, 0.690, 0.567, 0.503, 0.450, 0.290, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_m_langvidereg = [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.800, 0.836, 0.859, 0.862, 0.877, 0.884, 0.886, 0.906, 0.913, 0.912, 0.916, 0.921, 0.928, 0.926, 0.933, 0.931, 0.923, 0.931, 0.927, 0.921, 0.924, 0.920, 0.910, 0.912, 0.912, 0.915, 0.903, 0.915, 0.906, 0.914, 0.899, 0.896, 0.896, 0.885, 0.849, 0.855, 0.791, 0.751, 0.708, 0.602, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  var bf_k_langvidereg = [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.742, 0.767, 0.757, 0.745, 0.737, 0.733, 0.732, 0.736, 0.753, 0.786, 0.798, 0.814, 0.842, 0.851, 0.858, 0.878, 0.891, 0.897, 0.904, 0.909, 0.909, 0.913, 0.901, 0.908, 0.899, 0.904, 0.892, 0.900, 0.891, 0.905, 0.887, 0.875, 0.874, 0.862, 0.829, 0.793, 0.700, 0.661, 0.578, 0.450, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

  var restleve_m = [90,89,88,87,85,84,83,82,81,80,79,78,76,75,74,73,72,71,70,69,67,66,65,64,63,62,61,60,58,57,56,55,54,53,52,51,49,48,47,46,45,44,43,42,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,18,17,16,15,14,13,13,12,11,11,10,9,9,8,8,7,7,6,6,5,5,5,4,4,4,3,3,3,3,2,2,2,2];
  var restleve_k = [91,91,89,88,87,86,85,84,83,82,81,80,78,77,76,75,74,73,72,71,70,68,67,66,65,64,63,62,61,60,58,57,56,55,54,53,52,51,50,48,47,46,45,44,43,42,41,40,39,38,36,35,34,33,32,31,30,29,28,27,26,25,24,23,23,22,21,20,19,18,17,16,16,15,14,13,13,12,11,10,10,9,9,8,8,7,7,6,6,5,5,5,4,4,4,3,3,3,3,2];

  //NB: samme data ligger andetsteds
  var y_m_skole = [119949, 143772, 161413, 172137, 183107, 199737, 223515, 242726, 258260, 267717, 276622, 285148, 291371, 296361, 297622, 301796, 305646, 311639, 315487, 321995, 327906, 333264, 336451, 337745, 337820, 335786, 334825, 335181, 335655, 336654, 336762, 337674, 337722, 338708, 338198, 337837, 336853, 336696, 334737, 333245, 327931, 326075, 322713, 324965, 324511, 313277, 298478, 280438, 265929, 251261, 232726, 222067, 208694, 201923, 193136, 185016, 180983, 179582];
  var y_m_almgym = [105912, 115347, 117980, 115601, 114672, 123305, 141398, 169273, 199437, 226077, 249323, 268524, 290027, 304615, 322290, 333858, 343310, 355361, 359549, 369869, 369511, 376628, 385550, 394423, 407549, 416279, 421747, 421881, 421574, 422824, 422361, 425797, 426633, 424423, 417088, 411814, 404786, 403104, 401837, 403542, 401083, 397828, 398013, 394252, 385572, 379202, 386729, 386277, 373809, 347923, 311685, 307065, 293280, 264756, 215814, 161681, 166525, 150304];
  var y_m_erhgym = [102630, 124109, 136416, 137922, 142877, 156528, 184379, 220868, 254013, 281746, 300125, 317865, 334177, 349767, 365886, 374287, 383337, 393221, 409857, 420923, 432586, 434966, 439628, 439104, 445437, 455471, 463016, 465527, 468134, 466632, 465791, 465253, 460873, 457092, 444231, 437873, 429201, 434157, 423515, 417378, 405514, 411543, 419585, 410650, 401472, 375440, 355631, 339289, 320273, 289274, 270620, 253328, 232538, 211405, 195038, 247845, 240478, 259783];
  var y_m_erhvfagl = [165540, 196531, 228458, 262341, 274874, 286243, 297035, 306129, 315114, 322583, 328885, 334319, 338609, 342924, 348354, 352401, 356877, 359306, 364026, 367598, 370596, 371741, 372678, 375103, 377164, 380314, 381850, 383950, 383467, 383359, 381204, 379863, 378139, 376469, 374698, 371514, 370019, 366615, 362850, 356936, 352629, 351378, 348612, 346988, 343580, 332313, 315138, 294504, 277093, 259905, 239929, 225638, 216196, 203185, 192035, 175139, 179687, 178391];
  var y_m_kortvidereg = [142219, 142219, 148578, 159805, 180253, 211657, 251125, 290140, 318865, 340329, 354932, 366552, 375713, 386616, 396366, 405987, 415359, 425313, 431624, 437635, 441551, 445559, 446308, 445774, 449270, 449272, 449233, 445850, 442178, 442383, 442025, 442588, 438052, 434395, 432689, 430245, 426226, 422325, 417998, 415263, 412304, 409235, 405598, 391988, 374629, 351536, 334548, 309152, 279902, 254183, 237451, 222929, 210582, 193308, 200270, 195168, 211379, 209172];
  var y_m_mellemvidereg = [109426, 109426, 169259, 243782, 317870, 326786, 325095, 328413, 340803, 353900, 364641, 374198, 382748, 390315, 399003, 405141, 413219, 420112, 430542, 438356, 448850, 457969, 470957, 480798, 485761, 490334, 497241, 503863, 508116, 510750, 510697, 510681, 502412, 498884, 488406, 483044, 474557, 469491, 461406, 455541, 448482, 446080, 442402, 437761, 433883, 426069, 414226, 381149, 348319, 314875, 285813, 252529, 219934, 206455, 198220, 196863, 202684, 202395];
  var y_m_bachelor = [108771, 108771, 108771, 107217, 106910, 108624, 118297, 132412, 152905, 172558, 208726, 249304, 295054, 326527, 355418, 370485, 388038, 398665, 420529, 437193, 452587, 463860, 466482, 472336, 472966, 474763, 480844, 494504, 505561, 501209, 497967, 508749, 515453, 507672, 502329, 486997, 486906, 469668, 458635, 448388, 447791, 450692, 443752, 441682, 435914, 428313, 388893, 364988, 337231, 335765, 336962, 313993, 314014, 320285, 314189, 256835, 214987, 191069];
  var y_m_langvidereg = [393790, 393790, 393790, 393790, 371740, 351330, 339288, 351366, 366919, 378866, 394442, 412229, 431674, 451805, 471742, 486778, 500620, 513185, 527492, 545223, 558037, 575501, 585403, 600448, 609220, 619704, 622835, 627614, 630265, 636162, 633770, 632723, 634142, 641050, 641325, 640612, 632315, 626192, 615262, 608498, 600933, 593272, 581931, 570869, 557225, 545354, 532731, 521024, 500747, 464731, 417328, 362906, 315151, 278332, 255630, 246557, 253266, 233772];
  var y_k_skole = [94195, 116446, 135722, 148650, 153524, 160052, 173393, 188942, 202022, 210641, 215936, 221011, 225096, 228500, 232177, 236288, 242377, 247221, 251240, 253714, 257700, 260950, 265624, 266832, 268157, 268829, 270740, 272836, 274021, 275510, 277645, 280348, 282345, 283573, 284668, 285278, 286377, 286867, 287689, 286056, 278594, 276101, 271447, 273984, 270998, 257639, 247754, 233471, 229078, 212030, 201573, 188229, 178412, 164244, 159165, 155743, 157286, 163009];
  var y_k_almgym = [117931, 117624, 112767, 106251, 103667, 110625, 124701, 141513, 160154, 182241, 204410, 222907, 235671, 245516, 254060, 260390, 267313, 270383, 277451, 281947, 291602, 297351, 305665, 311652, 317420, 325897, 332693, 338123, 335580, 337963, 337699, 339507, 338355, 341953, 339293, 341345, 338293, 340744, 340310, 339546, 341921, 345209, 347666, 347418, 339406, 322422, 316365, 297830, 294300, 275105, 250884, 203604, 166880, 203638, 263246, 241080, 242739, 217304];
  var y_k_erhgym = [145970, 140546, 131902, 124724, 122853, 133190, 150296, 175528, 199347, 221116, 237403, 249590, 258796, 266602, 275384, 285354, 300454, 312189, 321485, 321657, 324357, 329889, 334556, 338453, 342769, 346970, 351110, 354303, 355672, 354576, 352688, 354011, 353850, 353033, 351717, 355429, 359333, 363513, 363037, 345145, 334019, 328232, 350995, 367038, 362641, 344259, 326883, 303508, 272940, 241753, 244364, 227062, 250888, 236595, 208218, 192637, 145582, 273744];
  var y_k_erhvfagl = [144017, 167649, 190459, 209286, 223677, 232342, 238621, 243851, 248166, 252781, 256042, 260760, 264335, 269333, 273072, 276881, 279842, 282690, 284884, 287397, 290294, 293296, 296830, 299862, 303628, 307276, 311065, 313765, 315378, 315766, 315988, 316071, 316439, 316332, 315317, 314520, 314461, 314001, 312508, 310090, 306840, 308170, 306023, 307173, 304400, 293160, 280961, 263575, 250348, 235942, 220876, 211182, 202339, 193952, 181812, 175973, 166424, 172460];
  var y_k_kortvidereg = [144469, 144469, 143601, 150861, 170218, 200132, 230680, 254938, 275021, 288460, 296906, 302413, 308450, 315064, 320873, 325574, 330300, 335342, 339223, 343521, 346309, 349950, 351323, 352396, 354931, 355634, 359590, 360112, 362467, 364245, 366293, 366420, 361641, 357357, 354781, 352830, 350755, 348574, 345453, 340154, 334807, 332399, 331716, 327732, 325426, 310845, 300167, 282172, 262396, 240776, 219237, 208275, 215012, 185912, 206795, 195660, 421444, 401819];
  var y_k_mellemvidereg = [277208, 277208, 277208, 288670, 291730, 296903, 291148, 295450, 297811, 299900, 302106, 305495, 309837, 313443, 318376, 322939, 328942, 333960, 338893, 343692, 348801, 354468, 358331, 360872, 362896, 365119, 367782, 370577, 373784, 375809, 376587, 376182, 376393, 377494, 378588, 379836, 381362, 383021, 383555, 382318, 378127, 377716, 373390, 371229, 366905, 349907, 328167, 298009, 279841, 251821, 225577, 205235, 186623, 175789, 161078, 160956, 152122, 151481];
  var y_k_bachelor = [106397, 106397, 103671, 100985, 99162, 102226, 107591, 118620, 133509, 157363, 187859, 218786, 252777, 278036, 298885, 309786, 317270, 326560, 336566, 347609, 356741, 356643, 355154, 351642, 354220, 356444, 362003, 366937, 372358, 370658, 369407, 363510, 356522, 352882, 353712, 352036, 346265, 346293, 341467, 341850, 337819, 338790, 331081, 314850, 320013, 313033, 309560, 272763, 263850, 240229, 238503, 223832, 206676, 235745, 159985, 104427, 102144, 132521];
  var y_k_langvidereg = [320830, 320830, 320830, 316862, 311135, 310342, 315703, 327218, 336021, 346313, 354248, 365393, 377124, 389483, 398191, 407195, 416630, 426772, 435309, 442352, 451292, 460677, 471148, 478805, 485585, 492192, 500437, 505756, 509582, 511387, 511318, 510816, 511249, 517175, 520705, 522250, 517264, 512434, 508174, 508539, 507987, 503702, 492457, 481010, 477287, 462249, 449410, 433725, 410849, 395541, 351868, 315392, 272201, 241052, 216900, 205455, 192150, 195100];

  var ind_m_TOTAL = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115647, 119536, 128755, 140081, 139045, 145629, 156108, 165767, 177115, 187587, 202427, 215747, 226445, 239654, 248587, 257816, 265187, 275933, 278491, 286972, 292909, 299326, 304863, 308139, 317320, 318835, 321710, 319448, 322477, 320762, 319636, 318856, 325700, 318805, 320174, 318331, 317507, 315040, 312749, 308202, 302938, 298759, 295622, 287756, 281864, 272587, 263286, 259529, 238398, 217057, 213919, 211694, 214166, 239198, 203577, 201286, 193153, 196885, 193533, 192523, 199005, 147370, 143967, 141323, 140463, 141615, 140748, 139219, 138860, 137374, 137974, 137336, 137372, 137459, 135664, 135576, 136200, 134821, 135391, 133765, 133041, 131490, 132230, 129756, 127349];
  var ind_m_moms = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28174, 28322, 27361, 28017, 28121, 28746, 29952, 30533, 31105, 31582, 32560, 33727, 34618, 35493, 35859, 36296, 36119, 36335, 35568, 35279, 34515, 34190, 33518, 32954, 32470, 31843, 31310, 30146, 29092, 27670, 26703, 25913, 25671, 24646, 24051, 23040, 22537, 22035, 21464, 20681, 19818, 19430, 18426, 17694, 17463, 17045, 16433, 16640, 14544, 14373, 14565, 15190, 15260, 15303, 15167, 14688, 13223, 13576, 13175, 12531, 17340, 17497, 16996, 16601, 16503, 16722, 16723, 16530, 16464, 16341, 16378, 16204, 16398, 16367, 16331, 16303, 16486, 16191, 16455, 16151, 15810, 15345, 15875, 14586, 14342];
  var ind_m_oevr_indir_skat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54048, 54143, 53533, 53949, 54015, 54412, 55177, 55546, 55909, 56211, 56832, 57573, 58138, 58694, 58926, 59203, 59091, 59228, 58741, 58557, 58073, 57867, 57440, 57082, 56775, 56377, 56039, 55300, 54631, 53729, 53115, 52614, 52460, 51810, 51432, 50790, 50471, 50152, 49790, 49293, 48746, 48499, 47862, 47397, 47251, 46985, 46598, 46729, 45399, 45290, 45412, 45809, 45853, 45880, 45794, 45490, 44560, 44784, 44530, 44121, 47173, 47272, 46954, 46704, 46642, 46781, 46781, 46659, 46617, 46539, 46562, 46452, 46575, 46555, 46532, 46515, 46631, 46444, 46611, 46418, 46202, 45907, 46243, 45425, 45270];
  var ind_m_kildeskatter = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11524, -8962, -1093, 5954, 3157, 6533, 12908, 19560, 27407, 34650, 44550, 52956, 59629, 67930, 73992, 80156, 85832, 93361, 95640, 102435, 108053, 113064, 117773, 121182, 129309, 131571, 135086, 134442, 138639, 139928, 141168, 142233, 148734, 144441, 147066, 147175, 147474, 146112, 145070, 142411, 138669, 135766, 134283, 126597, 128496, 124472, 121652, 121683, 99910, 100684, 96268, 97956, 99259, 101426, 101387, 100026, 94469, 97629, 95028, 95149, 93372, 41495, 38955, 37035, 36371, 37164, 36259, 35127, 34871, 33617, 34162, 33831, 33556, 33694, 31971, 31920, 32222, 31354, 31469, 30363, 30225, 29493, 29322, 29060, 27072];
  var ind_m_oevr_dir_skat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23210, 24178, 26948, 29826, 30859, 32659, 34531, 36338, 38570, 40725, 43631, 46322, 48616, 51073, 52890, 54765, 56417, 58671, 59495, 61078, 62217, 63440, 64540, 64740, 66036, 66269, 66417, 66795, 67655, 67489, 67111, 67164, 68280, 67814, 67851, 67860, 67818, 67497, 67263, 66739, 66586, 65989, 65726, 70740, 63710, 60158, 55214, 51451, 56805, 34971, 35935, 31000, 32055, 54850, 19489, 19343, 19162, 19157, 19062, 18983, 19381, 19367, 19324, 19243, 19208, 19209, 19245, 19163, 19168, 19138, 19132, 19111, 19103, 19104, 19092, 19098, 19122, 19093, 19117, 19094, 19066, 19007, 19051, 18946, 18926];
  var ind_m_oevr_indt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21739, 21854, 22006, 22334, 22892, 23279, 23540, 23790, 24124, 24419, 24855, 25169, 25444, 26464, 26921, 27395, 27728, 28339, 29046, 29622, 30050, 30766, 31593, 32180, 32731, 32774, 32858, 32765, 32461, 31946, 31538, 30933, 30555, 30095, 29773, 29465, 29208, 29244, 29161, 29077, 29120, 29074, 29325, 25329, 24944, 23928, 23389, 23027, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739];
  var ind_k_TOTAL = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 113618, 114844, 129967, 137152, 130113, 130774, 135507, 143313, 152093, 163184, 174001, 181755, 187873, 194873, 200669, 204134, 207024, 211101, 218573, 221317, 227823, 229923, 236512, 241270, 245130, 250421, 252376, 251752, 249529, 250953, 252100, 251932, 251686, 251242, 249857, 248757, 249393, 248864, 247726, 247158, 245178, 241493, 234598, 233245, 225204, 217794, 213214, 208960, 219095, 197461, 195200, 192024, 192139, 220694, 183609, 183575, 175617, 177724, 175027, 176112, 182864, 135672, 133088, 132318, 131702, 133461, 132620, 132264, 132216, 131571, 132918, 132878, 133154, 133254, 132218, 132789, 133354, 132399, 132722, 132446, 132769, 131674, 131719, 130772, 129982];
  var ind_k_moms = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27482, 26768, 27884, 27478, 26098, 25360, 25488, 26128, 26782, 27988, 28983, 29801, 30481, 31066, 31613, 31724, 31527, 31230, 31559, 30952, 30474, 29628, 29294, 28790, 27792, 27409, 26629, 25475, 23862, 22687, 21958, 21031, 20177, 19619, 18820, 17975, 17588, 17245, 16811, 16389, 15834, 15457, 14365, 14353, 14019, 13669, 13587, 13382, 13306, 12981, 13184, 13616, 13515, 14081, 13485, 13232, 11884, 12092, 11756, 11351, 15845, 15994, 15667, 15631, 15623, 15878, 15885, 15876, 15912, 15937, 16166, 16161, 16391, 16309, 16313, 16445, 16664, 16577, 16696, 16980, 17048, 16841, 16761, 16638, 16061];
  var ind_k_oevr_indir_skat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53610, 53156, 53865, 53607, 52731, 52263, 52344, 52750, 53165, 53930, 54562, 55081, 55513, 55884, 56231, 56302, 56176, 55988, 56197, 55812, 55508, 54971, 54760, 54439, 53806, 53563, 53068, 52336, 51312, 50566, 50104, 49515, 48973, 48620, 48112, 47576, 47330, 47113, 46837, 46570, 46217, 45978, 45285, 45277, 45065, 44843, 44791, 44661, 44613, 44407, 44535, 44810, 44746, 45105, 44726, 44566, 43711, 43842, 43629, 43372, 46224, 46319, 46111, 46088, 46083, 46245, 46250, 46244, 46267, 46283, 46428, 46425, 46571, 46518, 46521, 46605, 46744, 46689, 46764, 46944, 46988, 46856, 46805, 46727, 46361];
  var ind_k_kildeskatter = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12055, -10306, -1038, 4563, -88, 1133, 4799, 9810, 15418, 21791, 28552, 33220, 36535, 40190, 43470, 45398, 47220, 50147, 54525, 56936, 62493, 64609, 69658, 73963, 78355, 83357, 86364, 87329, 88317, 91723, 94421, 96237, 97932, 98603, 99167, 99799, 101180, 101341, 101247, 101452, 100117, 97860, 93908, 92615, 93357, 90939, 90347, 89661, 85080, 85506, 81528, 82262, 81491, 85843, 84696, 85106, 79499, 81263, 79159, 80953, 79984, 32550, 30536, 29826, 29229, 30554, 29695, 29363, 29253, 28553, 29510, 29493, 29374, 29616, 28564, 28905, 29101, 28293, 28415, 27652, 27861, 27122, 27306, 26578, 26774];
  var ind_k_oevr_dir_skat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22843, 23408, 27284, 29315, 28886, 29230, 29755, 31050, 32649, 34756, 36653, 38081, 39336, 40573, 41786, 42648, 43734, 44822, 46646, 47542, 48871, 49494, 50804, 51386, 52033, 52842, 52984, 53376, 53253, 53591, 53678, 53771, 53656, 53931, 53586, 53589, 53730, 53630, 53360, 53426, 53645, 53026, 51744, 56338, 48878, 45133, 41798, 38823, 54356, 32827, 34214, 29598, 30648, 53926, 18963, 18932, 18784, 18787, 18743, 18697, 19072, 19071, 19035, 19034, 19027, 19045, 19051, 19042, 19045, 19059, 19075, 19060, 19079, 19072, 19080, 19096, 19106, 19100, 19108, 19131, 19132, 19117, 19107, 19089, 19046];
  var ind_k_oevr_indt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21739, 21817, 21973, 22189, 22486, 22789, 23121, 23576, 24078, 24719, 25251, 25572, 26007, 27160, 27569, 28063, 28367, 28914, 29646, 30076, 30476, 31221, 31996, 32692, 33143, 33251, 33330, 33234, 32785, 32386, 31940, 31379, 30947, 30469, 30171, 29818, 29564, 29536, 29471, 29321, 29364, 29173, 29297, 24662, 23886, 23211, 22690, 22433, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739, 21739];

  var ind_m_samlet = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95851, 96072, 95536, 96342, 96993, 97867, 99062, 99817, 100681, 101457, 102748, 104079, 105197, 107080, 108068, 109164, 109704, 110831, 111270, 112035, 112264, 113092, 113745, 114185, 114691, 114570, 114612, 114035, 113512, 112212, 111675, 110908, 110894, 110289, 110052, 109326, 109241, 109324, 109207, 108990, 109127, 109202, 109200, 114267, 107924, 106937, 104787, 103457, 121161, 99974, 101645, 97540, 98784, 121867, 86498, 86153, 85100, 85354, 85065, 84602, 88061, 88173, 87813, 87529, 87458, 87616, 87617, 87478, 87431, 87342, 87369, 87243, 87383, 87360, 87335, 87315, 87446, 87234, 87424, 87205, 86960, 86626, 87007, 86080, 85905];
  var ind_k_samlet = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95353, 94918, 95879, 95808, 95129, 94934, 95412, 96404, 97480, 99119, 100503, 101565, 102666, 104437, 105485, 106316, 106768, 107383, 108672, 108986, 109370, 109748, 110583, 111141, 111054, 111156, 110914, 110258, 108948, 107897, 107409, 106435, 105621, 105295, 104707, 103967, 103854, 103925, 103851, 103839, 104127, 103939, 103446, 108684, 101992, 101422, 100093, 98414, 119418, 98123, 99873, 95700, 96814, 120559, 85288, 85107, 84137, 84287, 84045, 83754, 86985, 87092, 86858, 86832, 86826, 87009, 87014, 87008, 87034, 87052, 87216, 87213, 87378, 87319, 87322, 87417, 87574, 87512, 87597, 87801, 87851, 87701, 87644, 87556, 87141];

  var udg_m_efterloen = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24046, 29314, 51765, 65564, 74824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  var udg_m_folkepension = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111600, 112421, 99310, 100073, 100749, 101521, 101722, 106292, 106325, 106350, 106328, 106333, 111446, 111399, 111453, 111452, 111459, 115534, 115483, 115475, 115486, 115477, 118554, 118587, 118592, 118493, 118583, 120140, 120168, 120144, 120000, 120227, 120578, 120683, 121057, 121059, 121062];
  var udg_m_ikke_indk_relat = [21121, 21106, 21083, 22520, 22293, 21103, 20657, 20083, 19082, 18283, 17966, 17810, 17554, 17475, 17151, 17176, 14204, 13563, 10419, 7221, 3891, 3678, 3752, 3836, 4037, 4114, 4403, 4444, 4523, 4412, 4427, 4278, 4381, 4272, 4399, 4397, 4328, 4435, 4471, 4409, 4508, 4650, 4569, 4693, 4784, 4638, 4676, 4697, 4772, 4719, 4770, 4621, 4674, 4580, 4581, 4807, 4940, 4853, 4864, 4902, 4774, 4640, 4663, 4878, 5429, 29325, 30306, 31568, 32551, 33206, 33544, 34232, 34544, 35167, 35609, 36280, 36661, 36929, 36827, 36867, 37170, 37288, 38061, 38933, 39512, 39692, 40034, 40101, 40015, 40421, 41078, 41996, 42706, 43120, 43578, 46100, 43001, 40283, 37975, 41848, 30351, 30353];
  var udg_m_indiv_social = [68509, 68558, 68580, 75431, 65573, 54690, 47883, 40012, 30643, 26311, 22356, 18440, 15062, 13828, 13124, 12626, 12229, 12210, 12225, 12229, 12248, 12248, 12261, 12277, 12314, 12338, 12369, 12415, 12429, 12458, 12486, 12500, 12508, 12512, 12516, 12509, 12534, 12571, 12583, 12622, 12680, 12716, 12724, 12822, 12873, 12934, 12979, 13082, 13089, 13148, 13153, 13178, 13167, 13238, 13258, 13344, 13432, 13475, 13513, 13564, 13563, 13628, 13667, 13824, 13968, 14296, 14674, 15107, 15551, 16075, 16650, 17371, 18283, 19469, 20915, 22703, 24765, 26891, 30292, 34574, 38573, 43109, 47786, 51260, 55062, 59200, 61761, 66430, 68266, 69228, 69268, 73264, 74534, 77704, 80182, 84954, 79181, 78578, 75099, 70322, 62766, 65703];
  var udg_m_indiv_sundhed = [18975, 19145, 19257, 14827, 12771, 11923, 11383, 11104, 10949, 10847, 10829, 10881, 11020, 11119, 11261, 11448, 11324, 11220, 11109, 11001, 10837, 10934, 10972, 11006, 10969, 11045, 11192, 11510, 11633, 11956, 12153, 12304, 12326, 12526, 12613, 12524, 13039, 13466, 13831, 14418, 14796, 15056, 15216, 15497, 16168, 16700, 17453, 18328, 19303, 19909, 21137, 22269, 23869, 25133, 26258, 27543, 29007, 29931, 31333, 32616, 33471, 34817, 35173, 36577, 36631, 39392, 41491, 44105, 46722, 50303, 51456, 54143, 56729, 59616, 61646, 65384, 68927, 71249, 74822, 78782, 82801, 86727, 92078, 97908, 104478, 112092, 117299, 124367, 133585, 141935, 148896, 164583, 180941, 192078, 206942, 234090, 247811, 263659, 279286, 316367, 286310, 287828];
  var udg_m_indiv_underv = [2283, 2283, 2283, 2306, 19061, 36199, 52758, 69339, 85858, 85867, 85983, 86069, 85781, 85678, 84591, 78046, 71418, 63281, 52424, 41750, 36202, 30569, 26305, 24197, 21880, 19692, 17040, 14529, 12130, 10309, 8586, 7473, 6650, 5927, 5339, 4897, 4560, 4253, 4033, 3866, 3731, 3633, 3539, 3486, 3408, 3345, 3277, 3224, 3149, 3089, 3041, 2976, 2923, 2870, 2822, 2790, 2764, 2728, 2703, 2665, 2623, 2592, 2565, 2549, 2539, 2539, 2545, 2545, 2530, 2518, 2497, 2466, 2447, 2426, 2408, 2387, 2372, 2354, 2348, 2341, 2336, 2327, 2320, 2313, 2308, 2298, 2294, 2293, 2291, 2290, 2289, 2284, 2283, 2283, 2283, 2283, 2283, 2283, 2283, 2283, 2283, 2283];
  var udg_m_kollekt
  var udg_m_andet_indiv
  var udg_m_oevr_udg = [6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34790, 34794, 34797, 34801, 34804, 34807, 34808, 34809, 34817, 34817, 34822, 34825, 34827, 34836, 34846, 34846, 34853, 34874, 34894, 34905, 34961, 34998, 35036, 35095, 35180, 35186, 35274, 35358, 35434, 35068, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785];
  var udg_m_SUM = [146945, 147149, 147260, 151142, 155755, 159972, 168738, 176595, 182588, 177365, 173191, 169258, 165474, 164157, 162184, 155353, 145231, 164619, 150523, 136546, 127523, 121773, 117635, 115661, 113545, 111533, 109349, 107242, 105060, 103479, 101997, 100904, 100219, 99594, 99228, 98690, 98828, 99092, 99286, 99693, 100091, 100436, 100434, 100884, 101630, 102022, 102791, 103743, 104746, 105319, 106564, 107565, 109191, 110418, 111573, 113222, 114888, 115820, 117331, 118739, 143104, 149336, 172177, 187736, 197737, 261498, 265783, 256981, 261772, 267196, 270013, 274279, 282639, 287348, 291272, 297426, 303403, 313215, 320032, 328362, 336677, 345256, 360124, 370241, 381179, 393112, 401211, 416090, 427089, 436812, 444369, 465055, 484949, 499697, 517473, 551771, 556848, 569725, 579670, 616222, 567113, 571574];
  var udg_m_TOTAL = [146945, 147149, 147260, 151142, 155755, 159972, 168738, 176595, 182588, 177365, 173191, 169258, 165474, 164157, 162184, 155353, 145231, 189827, 180987, 164172, 153552, 149070, 145879, 143648, 141096, 139548, 136832, 133790, 130862, 128495, 126380, 125177, 123889, 122940, 122302, 121536, 121503, 121440, 121820, 121735, 122233, 123542, 123719, 125002, 125766, 126675, 128032, 129479, 130968, 132377, 134081, 136471, 139355, 141521, 144120, 147257, 149902, 152534, 155394, 158864, 175665, 181934, 201472, 215536, 224858, 261498, 265783, 256981, 261772, 267196, 270013, 274279, 282639, 287348, 291272, 297426, 303403, 313215, 320032, 328362, 336677, 345256, 360124, 370241, 381179, 393112, 401211, 416090, 427089, 436812, 444369, 465055, 484949, 499697, 517473, 551771, 556848, 569725, 579670, 616222, 567113, 571574];
  var udg_k_efterloen = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37222, 45574, 70907, 84254, 91071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  var udg_k_folkepension = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114690, 115144, 101182, 101412, 101690, 101864, 101930, 106386, 106381, 106396, 106380, 106369, 111477, 111509, 111501, 111495, 111501, 115567, 115573, 115572, 115523, 115546, 118629, 118628, 118644, 118642, 118677, 120219, 120148, 120117, 120202, 120191, 120942, 120893, 120815, 120862, 121062];
  var udg_k_ikke_indk_relat = [21685, 21651, 21571, 22965, 22364, 20841, 20297, 19254, 18267, 17593, 17353, 16981, 16642, 16526, 16358, 16443, 13757, 13565, 10530, 7417, 4246, 4234, 4464, 4895, 5078, 5321, 5649, 5819, 5856, 6055, 6200, 6474, 6804, 6960, 7043, 7233, 7510, 7735, 7859, 7925, 8043, 7947, 7670, 7556, 7360, 6965, 6411, 6248, 5829, 5572, 5230, 5058, 4838, 4799, 4859, 4892, 4959, 4949, 4939, 4928, 4997, 5018, 5113, 5498, 6142, 30053, 31192, 32455, 33214, 34225, 34686, 35066, 35572, 36558, 37103, 37777, 38390, 39523, 39828, 40292, 41311, 42136, 42298, 43209, 44151, 44742, 45448, 45905, 46703, 47172, 47580, 47911, 48825, 49873, 51217, 52081, 54266, 54038, 53537, 52867, 52262, 48812];
  var udg_k_indiv_social = [68434, 68512, 68552, 74652, 64447, 53673, 46835, 38736, 29685, 25564, 21542, 17726, 14681, 13637, 12985, 12592, 12215, 12198, 12198, 12217, 12228, 12275, 12302, 12334, 12341, 12363, 12364, 12344, 12354, 12347, 12366, 12387, 12427, 12466, 12533, 12548, 12596, 12608, 12676, 12686, 12723, 12766, 12824, 12819, 12897, 12964, 13050, 13119, 13231, 13306, 13420, 13528, 13665, 13740, 13853, 13938, 14068, 14176, 14309, 14417, 14447, 14401, 14508, 14526, 14590, 14734, 14948, 15159, 15561, 16141, 16703, 17406, 18326, 19486, 20752, 22329, 24100, 26126, 29328, 33371, 38045, 43132, 48248, 51563, 55056, 57573, 58946, 61543, 63792, 65817, 66901, 70514, 70967, 70602, 70298, 68811, 68571, 67088, 63691, 62045, 59124, 57014];
  var udg_k_indiv_sundhed = [17094, 17254, 17369, 13583, 11926, 11157, 10753, 10479, 10268, 10374, 10501, 10663, 10926, 11470, 11829, 12333, 12485, 12796, 12859, 13021, 13241, 13930, 14686, 15713, 16939, 18141, 19684, 21107, 22163, 23206, 23965, 23865, 23749, 23646, 22781, 21686, 21142, 20566, 20098, 19781, 19471, 19114, 18968, 18803, 18967, 19660, 20490, 21027, 21478, 22311, 23396, 23896, 25320, 26365, 27647, 27986, 29269, 29484, 30189, 30911, 31571, 32014, 33146, 33839, 35175, 36883, 38694, 40039, 42076, 44209, 45832, 47665, 49715, 52613, 56223, 60261, 63207, 68041, 71479, 76091, 80864, 88294, 93968, 101199, 110715, 120120, 125152, 137445, 149465, 159768, 171424, 196779, 213520, 229466, 249210, 266488, 288013, 307205, 327889, 352538, 373190, 377608];
  var udg_k_indiv_underv = [2283, 2283, 2283, 2322, 19111, 36164, 52814, 69296, 85777, 85557, 85668, 85946, 85756, 85530, 85657, 80444, 74412, 65623, 54439, 43410, 37926, 32847, 30613, 29744, 26864, 23056, 19177, 15621, 12834, 10801, 9219, 7865, 7045, 6365, 5852, 5420, 5166, 4938, 4755, 4647, 4543, 4458, 4355, 4215, 4067, 3952, 3844, 3757, 3686, 3583, 3473, 3388, 3276, 3178, 3088, 3021, 2935, 2879, 2833, 2794, 2775, 2772, 2777, 2777, 2782, 2767, 2733, 2683, 2635, 2592, 2553, 2521, 2492, 2462, 2430, 2401, 2378, 2358, 2344, 2337, 2327, 2317, 2310, 2303, 2298, 2297, 2295, 2293, 2295, 2291, 2291, 2292, 2293, 2292, 2294, 2283, 2283, 2283, 2283, 2283, 2283, 2283];
  var udg_k_kollekt
  var udg_k_andet_indiv
  var udg_k_oevr_udg = [6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 6497, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34792, 34796, 34801, 34806, 34811, 34814, 34814, 34817, 34821, 34827, 34830, 34841, 34856, 34856, 34867, 34874, 34896, 34910, 34930, 34946, 35011, 35059, 35095, 35215, 35313, 35343, 35422, 35450, 35478, 34978, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785, 34785];
  var udg_k_SUM = [145553, 145758, 145831, 149579, 153903, 157892, 166756, 173822, 180055, 175145, 171120, 167373, 164060, 163221, 162885, 157869, 148926, 168527, 154370, 140409, 131985, 127631, 126410, 127031, 125566, 123225, 121218, 119236, 117553, 116754, 116094, 114941, 114381, 113797, 112575, 111258, 110789, 110221, 109765, 109418, 109167, 108674, 108217, 107808, 107706, 107968, 108227, 108607, 108694, 109262, 110025, 110440, 111717, 112736, 114221, 114710, 116134, 116469, 117280, 118087, 155550, 164124, 190796, 205239, 214104, 263473, 267056, 255862, 259242, 263202, 265984, 268933, 276835, 281845, 287248, 293493, 298788, 311871, 318833, 327936, 338386, 351725, 366736, 378191, 392136, 404600, 411733, 430159, 445228, 458037, 471184, 500517, 520169, 536725, 557481, 574210, 597669, 615900, 632638, 654892, 672066, 671124];
  var udg_k_TOTAL = [145553, 145758, 145831, 149579, 153903, 157892, 166756, 173822, 180055, 175145, 171120, 167373, 164060, 163221, 162885, 157869, 148926, 194401, 184832, 165925, 157029, 157327, 159233, 161586, 161504, 161098, 160941, 162312, 163195, 163713, 164173, 163209, 161272, 158215, 154639, 150679, 147851, 144427, 141333, 139176, 137572, 135956, 134672, 133844, 133829, 134112, 134897, 135939, 136519, 137952, 139741, 141283, 143432, 145540, 148840, 151447, 153893, 155346, 157956, 161006, 192519, 200852, 225514, 238899, 247609, 263473, 267056, 255862, 259242, 263202, 265984, 268933, 276835, 281845, 287248, 293493, 298788, 311871, 318833, 327936, 338386, 351725, 366736, 378191, 392136, 404600, 411733, 430159, 445228, 458037, 471184, 500517, 520169, 536725, 557481, 574210, 597669, 615900, 632638, 654892, 672066, 671124];

  var kalibrer_dream = [-20, -15, -17, -21, -30, -27, -26, -33, -26, -25, -30, -20, -17, -7, 8, 33, 45, 6587, -41321, -47118, -13096, -136, 5179, 22820, 19697, 16392, 26607, 20551, 16030, 12539, 8072, 4636, 1480, -2344, -7314, -10448, -14307, -19826, -22406, -26728, -29041, -33459, -35785, -36708, -34299, -34598, -34524, -34251, -34390, -37410, -34198, -33538, -32674, -32574, -30625, -28250, -26587, -22909, -19644, -13633, 18548, 24377, 51016, 63025, 67176, 77102, 51140, 42079, 40985, 41285, 38323, 39441, 44769, 51827, 48900, 51431, 51038, 52494, 101853, 104476, 80676, 81174, 84243, 85011, 65775, 65619, 66721, 68217, 67513, 66448, 65012, 63840, 64596, 63970, 63151, 66955, 61773, 59869, 59453, 62617];
  var kalibrer_dream2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8301, 10253, 1112, -2422, -3836, -8682, -7771, -6809, -9598, -7869, -6567, -5569, -4296, -3317, -2419, -1338, 71, 966, 2052, 3604, 4329, 5541, 6187, 7422, 8080, 8340, 7651, 7735, 7702, 7615, 7643, 8478, 7563, 7367, 7097, 7050, 6479, 5795, 5301, 4259, 3323, 1618, -7415, -9064, -16560, -19962, -21150, -24427, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  var kalibrer_dream3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2324, -2870, -312, 677, 1073, 2430, 2174, 1906, 2686, 2203, 1839, 1559, 1202, 929, 677, 374, -21, -271, -576, -1011, -1215, -1554, -1735, -2079, -2265, -2338, -2142, -2168, -2158, -2133, -2141, -2375, -2119, -2065, -1989, -1976, -1816, -1625, -1487, -1195, -932, -455, 2079, 2542, 4648, 5603, 5935, 6855, -58964, -58971, -58948, -58938, -58929, -58918, -58902, -58905, -58877, -58846, -58844, -58814, -58793, -58786, -58730, -58710, -58671, -58663, -58620, -58542, -58516, -58462, -58393, -58309, -58292, -58212, -58147, -58177, -58079, -57982, -57916, -57836, -57887, -57786];

  var indkomst = new Array(_aMax);
  for (var i = 0; i < _aMax; i++) {
    indkomst[i] = 0;
  }
  var indtaegter = new Array(_aMax);
  for (var i = 0; i < _aMax; i++) {
    indtaegter[i] = 0;
  }
  var udgifter = new Array(_aMax);
  for (var i = 0; i < _aMax; i++) {
    udgifter[i] = 0;
  }
  var nettobidrag = new Array(_aMax);
  for (var i = 0; i < _aMax; i++) {
    nettobidrag[i] = 0;
  }
  var nettobidragKumuleret = new Array(_aMax);
  for (var i = 0; i < _aMax; i++) {
    nettobidragKumuleret[i] = 0;
  }

  var bf = null;
  var y = null;

  if (koen == 0) {
    for (var i = 0; i < _aMax; i++) {
      udgifter[i] = udg_m_ikke_indk_relat[i] + udg_m_indiv_social[i] + udg_m_indiv_sundhed[i] + udg_m_indiv_underv[i] + udg_m_kollekt[i] + udg_m_andet_indiv[i] + udg_m_oevr_udg[i] + _brug_kalibrering * (kalibrer_dream[i] + kalibrer_dream2[i] + kalibrer_dream3[i]);
      indtaegter[i] = ind_m_samlet[i];
    }
    maxLevealder = Math.round(alder + restleve_m[alder]);
  } else {
    for (var i = 0; i < _aMax; i++) {
      udgifter[i] = udg_k_ikke_indk_relat[i] + udg_k_indiv_social[i] + udg_k_indiv_sundhed[i] + udg_k_indiv_underv[i] + udg_k_kollekt[i] + udg_k_andet_indiv[i] + udg_k_oevr_udg[i] + _brug_kalibrering * (kalibrer_dream[i] + kalibrer_dream2[i] + kalibrer_dream3[i]);
      indtaegter[i] = ind_k_samlet[i];
    }
    maxLevealder = Math.round(alder + restleve_k[alder]);
  }

  var alderUddSlut = Number.NaN;

  if (koen == 0) {
    //mand
    if (hf == 0) //skole
    {
      bf = bf_m_skole;
      alderUddSlut = 18;
      y = y_m_skole;
      omkVedFolkepensionPrAar = 74896;
      pensionsBidrag = 0.09;
    } else if (hf == 1) //almengym
    {
      bf = bf_m_almgym;
      alderUddSlut = 19;
      y = y_m_almgym;
      omkVedFolkepensionPrAar = 74896;
      pensionsBidrag = 0.09;
    } else if (hf == 2) //erh gym
    {
      bf = bf_m_erhgym;
      alderUddSlut = 19;
      y = y_m_erhgym;
      omkVedFolkepensionPrAar = 74896;
      pensionsBidrag = 0.09;
    } else if (hf == 3) //erhvfagl
    {
      bf = bf_m_erhvfagl;
      alderUddSlut = 20;
      y = y_m_erhvfagl;
      omkVedFolkepensionPrAar = 66334;
      pensionsBidrag = 0.12;
    } else if (hf == 4) //kort vg
    {
      bf = bf_m_kortvidereg;
      alderUddSlut = 22;
      y = y_m_kortvidereg;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    } else if (hf == 5) //mellem vg
    {
      bf = bf_m_mellemvidereg;
      alderUddSlut = 23;
      y = y_m_mellemvidereg;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    } else if (hf == 6) //bachelor
    {
      bf = bf_m_bachelor;
      alderUddSlut = 23;
      y = y_m_bachelor;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    } else if (hf == 7) //lang vg
    {
      bf = bf_m_langvidereg;
      alderUddSlut = 26;
      y = y_m_langvidereg;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    }
  } else {
    //kvinde
    if (hf == 0) //skole
    {
      bf = bf_k_skole;
      alderUddSlut = 18;
      y = y_k_skole;
      omkVedFolkepensionPrAar = 74896;
      pensionsBidrag = 0.09;
    } else if (hf == 1) //almengym
    {
      bf = bf_k_almgym;
      alderUddSlut = 19;
      y = y_k_almgym;
      omkVedFolkepensionPrAar = 74896;
      pensionsBidrag = 0.09;
    } else if (hf == 2) //erh gym
    {
      bf = bf_k_erhgym;
      alderUddSlut = 19;
      y = y_k_erhgym;
      omkVedFolkepensionPrAar = 74896;
      pensionsBidrag = 0.09;
    } else if (hf == 3) //erhvfagl
    {
      bf = bf_k_erhvfagl;
      alderUddSlut = 20;
      y = y_k_erhvfagl;
      omkVedFolkepensionPrAar = 66334;
      pensionsBidrag = 0.12;
    } else if (hf == 4) //kort vg
    {
      bf = bf_k_kortvidereg;
      alderUddSlut = 22;
      y = y_k_kortvidereg;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    } else if (hf == 5) //mellem vg
    {
      bf = bf_k_mellemvidereg;
      alderUddSlut = 23;
      y = y_k_mellemvidereg;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    } else if (hf == 6) //bachelor
    {
      bf = bf_k_bachelor;
      alderUddSlut = 23;
      y = y_k_bachelor;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    } else if (hf == 7) //lang vg
    {
      bf = bf_k_langvidereg;
      alderUddSlut = 26;
      y = y_k_langvidereg;
      omkVedFolkepensionPrAar = 37469;
      pensionsBidrag = 0.15;
    }
  }

  var sum = 0;
  for (var i = alder; i <= pensionsAlder; i++) {
    if (i >= 18) //ignorer aldre < 18 år
    {
      sum += 1 - bf[i - 18];
    }
  }
  var ledig_syg2 = sum;

  // -----------------------------------------------------------
  // Checks start
  // -----------------------------------------------------------

  if (alder < 18) {
    if (ledig_syg1 > 0) fejltext += "<p class=\"dbs-error\">Antal år som arbejdsløs, sygemeldt eller på (barsels)orlov siden 18-års alderen skal sættes til 0, hvis du er yngre end 18 år.</p>";
    if (udland2 > 0) fejltext += "<p class=\"dbs-error\">Antal år som du har boet i udlandet siden 18-års-alderen skal sættes til 0, hvis du er yngre end 18 år.</p>";
  } else {
    // >= 18 år
    if ((alder - 17) < ledig_syg1) fejltext += "<p class=\"dbs-error\">Antal år som arbejdsløs, sygemeldt eller på (barsels)orlov siden 18-års alderen er for højt givet din nuværende alder: sæt antallet ned.</p>";
    if ((alder - 17) < udland2) fejltext += "<p class=\"dbs-error\">Antal år som du har boet i udlandet siden 18-års-alderen er for højt givet din nuværende alder: sæt antallet ned.</p>";
  }

  if (udland1 > alder) fejltext += "<p class=\"dbs-error\">Antal år som du har boet i udlandet inden 18-års-alderen skal være mindre end din nuværende alder.</p>";

  //lignende tjeks findes andetsteds
  if(alder < 18 && radio != 0) fejltext += "<p class=\"dbs-error\">Hvis du er yngre end 18 år, skal du vælge 'Du er i gang med en uddannelse' under indkomst.</p>";
  if(alder > pensionsAlder && radio != 2) fejltext += "<p class=\"dbs-error\">Hvis du er ældre end din angivne pensionsalder, skal du vælge 'Du er pensionist' under indkomst.</p>";
  if (indkomst50 == -55555)  fejltext += "<p class=\"dbs-error\">Indkomsten skal angives som et heltal (uden komma eller punktum), f.eks. 31000.</p>";
  else if (indkomst50 <= 0) fejltext += "<p class=\"dbs-error\">Forventet indkomst skal være større end 0.</p>";

  if (fejltext != "") {   
        document.getElementById("p1").innerHTML = fejltext;                
	document.getElementById("graf").innerHTML = "";
	document.getElementById("labels").innerHTML = "";
        document.getElementById("p2").innerHTML = "";        
        document.getElementById("result").style.backgroundColor = "rgba(184, 8, 8, 0.8)";        
	document.getElementById("result").style.display = "block";
        return nettobidrag;
  }

  // -----------------------------------------------------------
  // Checks slut
  // -----------------------------------------------------------

  for (var i = 18; i <= pensionsAlder; i++) {
    var factor = y[i - 18]/y[50 - 18];
      if(i < 50 && factor < 0.6) y[i - 18] = 0.6 * y[50 - 18];
      if(i > 50 && factor < 0.85) y[i - 18] = 0.85 * y[50 - 18];
  }

  for (var i = 18; i <= pensionsAlder; i++) {
    if (i < alderUddSlut) {
      if (i <= 19) indkomst[i] = SUFribeloebPrAar1;
      else indkomst[i] = SUFribeloebPrAar2;
    }
    else {
      if(radio == 0) {
        indkomst[i] = y[i - 18] / y[alderUddSlut + 2 - 18] * indkomst50prAar;
      }
      else if(radio == 1) {
        indkomst[i] = y[i - 18] / y[alder - 18] * indkomst50prAar;
      }
      else {
        indkomst[i] = y[i - 18] / y[50 - 18] * indkomst50prAar;
      }
    }
  }
  if (pensionsAlder > 65) {
    for (var i = 66; i <= pensionsAlder; i++) {
      indkomst[i] = indkomst[65];
    }
  }

  var alder2 = Math.min(pensionsAlder, alder);
  var alder3 = Math.max(17, alder);

  for (var i = 18; i < alderUddSlut; i++) {
    udgifter[i] += omkVedSUPrAar;
  }

  if (alder >= 18) {
    Fordel(18, alder2, -Gsnit(18, alder2, indkomst) * ledig_syg1, indkomst);
    Fordel(18, alder2, omkVedLedighedPrAar * ledig_syg1, udgifter);
  }

  if (alder3 < pensionsAlder) {
    Fordel(alder3 + 1, pensionsAlder, -Gsnit(alder3 + 1, pensionsAlder, indkomst) * ledig_syg2, indkomst);
    Fordel(alder3 + 1, pensionsAlder, omkVedLedighedPrAar * ledig_syg2, udgifter); //lægges til udgifter
  }

  if (1 == 1) {
    Fordel(0, 17, -Gsnit(0, 17, indkomst) * udland1, indkomst);
    Fordel(0, 17, -Gsnit(0, 17, udgifter) * udland1, udgifter);
    Fordel(0, 17, -Gsnit(0, 17, indtaegter) * udland1, indtaegter);
  }
  if (alder >= 18) {
    Fordel(18, alder2, -Gsnit(18, alder2, indkomst) * udland2, indkomst);
    Fordel(18, alder2, -Gsnit(18, alder2, udgifter) * udland2, udgifter);
    Fordel(18, alder2, -Gsnit(18, alder2, indtaegter) * udland2, indtaegter);
  }

  var pension = 0;
  for (var i = alderUddSlut; i <= pensionsAlder; i++) {
    var p = pensionsBidrag * indkomst[i];
    indkomst[i] = indkomst[i] - p;
    pension += p;
  }
  Fordel(pensionsAlder + 1, maxLevealder, pension, indkomst);

  for (var i = pensionsAlder + 1; i < _aMax; i++) {
    udgifter[i] += omkVedFolkepensionPrAar;
  }

  for (var i = 0; i < _aMax; i++) {
    var skat = Skat(indkomst[i]);
    var samletSkat = skat + 0.245 * (indkomst[i] - skat);
    indtaegter[i] += samletSkat;
  }

  var flag = 0;
  var flag2 = 0;
  var break_even = 0;
  var break_even2 = 0;
  for (var i = 0; i < _aMax; i++) {
    nettobidrag[i] = indtaegter[i] - udgifter[i];
    if (i > 0) nettobidragKumuleret[i] = nettobidragKumuleret[i - 1] + nettobidrag[i];
    else nettobidragKumuleret[i] = nettobidrag[i];
    if (flag == 0 && i > 0 && i <= maxLevealder && nettobidragKumuleret[i - 1] <= 0 && nettobidragKumuleret[i] > 0) {
      break_even = i;
      flag = 1;
    }
    if (flag2 == 0 && i > 0 && i <= maxLevealder && nettobidragKumuleret[i - 1] >= 0 && nettobidragKumuleret[i] < 0) {
      break_even2 = i;
      flag2 = 1;
    }
  }

  var ledig_syg_ialt = ledig_syg1 + ledig_syg2;

  // ===============================================
  // =============== OUTPUT START ==================
  // ===============================================

  if (output == 1) {
    document.getElementById("p1").innerHTML = "";
    document.getElementById("graf").innerHTML = "";
    document.getElementById("labels").innerHTML = "";
    document.getElementById("p2").innerHTML = "";
    
    document.getElementById("result").style.backgroundColor = "rgba(255,255,255,0.8)";    

    var u = "";
    var s = "";
    var partWidth = 100 / (maxLevealder + 1);
    s += "<div class=\"float-wrap\">";
    u += "<div class=\"float-wrap\">";
    for (var i = 0; i <= maxLevealder; i++) {
      var scale = nettobidrag[i] / 200000;
      if (scale < -1) scale = -1;
      if (scale > 1) scale = 1;
      //rgb: rød = 255,0,0  grøn = 0,255,0  gul = 255,255,0
      var r = 0;
      var g = 0;
      var b = 0;
      if (scale < -1) scale = -1;
      if (scale > 1) scale = 1;
      if (scale <= 0) {
        g = Math.floor((1 + scale) * 255);
        var d = Math.round(g / 16);
        s += "<div class=\"part colorr" + d + "\" style=\"width:" + partWidth + "%\"></div>";
      } else {
        r = Math.floor((1 - scale) * 255);
        var d = Math.round(r / 16);
        s += "<div class=\"part colorg" + d + "\" style=\"width:" + partWidth + "%\"></div>";
      }
      if (i == 0 || i == 20 || i == 40 || i == 60 || i == maxLevealder) {
        u += "<div class=\"labelpart\" style=\"width:" + partWidth + "%; white-space:nowrap;\">" + i + " år</div>";
      } else {
        u += "<div class=\"labelpart\" style=\"width:" + partWidth + "%\"></div>";
      }

    }
    s += "</div>";
    u += "</div>";
    document.getElementById("graf").innerHTML = s;
    document.getElementById("labels").innerHTML = u;

    var mio = ToFixed(nettobidragKumuleret[maxLevealder] / 1000000, 2);

    //bemærk: denne kr variabel en en streng, og det er den absolutte værdi. Variablen mio indeholder fortegnet.
    var kr = FormatNumber(100 * Math.round(Math.abs(nettobidragKumuleret[maxLevealder] / maxLevealder / 100)));

    var mio_comma = mio.toString().replace('.',',');
    var minusmio_comma = (-mio).toString().replace('.',',');

    if (mio >= 0) {
      document.getElementById("p1").innerHTML += "<img src=\"/upload/3rd-party/de-bredeste-skuldre/images/thumbs-up.png\" alt=\"Thumbs-up ikon\"><p class=\"dbs-result-header\">Vi forventer, at du giver samfundet et overskud på " + mio_comma + " mio. kr</p>";
    } else {
      document.getElementById("p1").innerHTML += "<img src=\"/upload/3rd-party/de-bredeste-skuldre/images/thumbs-down.png\" alt=\"Thumbs-up ikon\"><p class=\"dbs-result-header\">Vi forventer, at du kommer til at koste samfundet " + minusmio_comma + " mio. kr</p>";
    }

    if (mio >= 0) {
      document.getElementById("p1").innerHTML += "<p class=\"dbs-higlight\">Det svarer til et overskud på <b>" + kr + " kr.</b> pr. leveår.</p>"
    } else {
      document.getElementById("p1").innerHTML += "<p class=\"dbs-higlight\">Det svarer til et underskud på <b>" + kr + " kr.</b> pr. leveår.</p>"
    }

    document.getElementById("p1").innerHTML += "<iframe src=\"//www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.b.dk%2Fnationalt%2Fer-du-oekonomisk-baeredygtig&amp;width&amp;layout=button_count&amp;action=like&amp;show_faces=false&amp;share=true&amp;height=21&amp;appId=1375051002758459\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden; height:21px; margin:20px 0;\" allowTransparency=\"true\"></iframe>";

    var overskudText = "";    
    
    if (mio > 0 || break_even > 0) { //overskud eller midlertidigt overskud
      if (alder < break_even) {
        overskudText += "Ifølge beregningerne bliver du økonomisk bæredygtig som <b>" + break_even + "-årig</b>. "
      } else {
        overskudText += "Ifølge beregningene blev du økonomisk bæredygtig som <b>" + break_even + "-årig</b>. "
      }      
      if (mio > 0) { //samlet overskud
        overskudText += "\"Økonomisk bæredygtig\" betyder, at du har betalt mere til de offentlige kasser, end du har kostet i samme periode. Når man bliver ældre, vil man imidlertid begynde at trække mere på de offentlige kasser, f.eks. på grund af folkepension, ældrepleje og sygdom. Så man kan sagtens nå at blive en samlet underskudsforretning for staten. ";
        overskudText += "Ud fra de indtastede oplysninger er forventningen dog, at du forbliver en samlet overskudsforretning for de offentlige kasser over hele livet.";
      } else { //samlet underskud, angiv hvornår man gør i underskud
        overskudText += "\"Økonomisk bæredygtig\" betyder, at du har betalt mere til de offentlige kasser, end du har kostet i samme periode. Når man bliver ældre, vil man imidlertid begynde at trække mere på de offentlige kasser, f.eks. på grund af folkepension, ældrepleje og sygdom. Så man kan sagtens nå at blive en samlet underskudsforretning for staten. ";
        if (alder < break_even2) {
          overskudText += "Ud fra de indtastede oplysninger er forventningen, at du bliver en underskudsforretning fra <b>" + break_even2 + "-årsalderen</b>.";
        } else {
          overskudText += "Ud fra de indtastede oplysninger er forventningen, at du blev en underskudsforretning fra <b>" + break_even2 + "-årsalderen</b>.";
        }
      }
    } else { //har været i (akkumuleret) rød hele vejen
      overskudText += "Ifølge beregningerne er der ikke udsigt til, at du i løbet af livet bliver en samlet overskudsforretning for de offentlige kasser. Det skyldes, at når man bliver ældre, vil man begynde at trække mere på de offentlige kasser, f.eks. på grund af folkepension, ældrepleje og sygdom. Derfor stiger samfundets udgifter, samtidigt med, at man betaler mindre til fælleskassen.";
    }
    document.getElementById("p1").innerHTML += "<p class=\"dbs-higlight\">" + overskudText + "</p>";

    var pensionsTid = maxLevealder - pensionsAlder;
    
    var ledig_syg_ialt_comma = ToFixed(ledig_syg_ialt, 1).toString().replace('.',',');    

    var text2 = "<p>Med de oplysninger, du har angivet, kan du statistisk set forvente at blive <b>" + maxLevealder + " år</b> gammel. Inden da vil en gennemsnitlig dansker som dig ";
    text2 += "fra 18-års alderen have brugt <b>" + ToFixed(alderUddSlut - 18, 0) + "</b> år på (færdiggjort) uddannelse og have været ledig, syg eller på (barsels)orlov i <b>" + ledig_syg_ialt_comma + " år.</b> ";
    text2 += "Du forventes at være pensionist i <b>"+ pensionsTid + " år</b>.";
    text2 += "</p>";
    document.getElementById("p1").innerHTML += text2;

    document.getElementById("p1").innerHTML += "<b>Se hvornår du bidrager til statskassen, og hvornår du koster:</b>";

    var text3 = "<p>På grafen herover kan du se, hvornår i livet du bidrager til de offentlige kasser, og hvornår du koster penge. Rød betyder, at du i den alder er en underskudsforretning for ";
    text3 += "de offentlige kasser. Gul betyder, at du går ca. i nul. Grøn betyder, at du betaler mere, end du koster.<p>";
    document.getElementById("p2").innerHTML = text3;

    document.getElementById("p2").innerHTML += "<b>Bagom udregningen:</b>";

    var text4 = "<p class=\"dbs-small\">Beregningerne er behæftet med usikkerhed, og beregningene giver udelukkende et approksimativt overslag over personens træk på de offentlige kasser og siger eksempelvis ikke noget om, hvorvidt personen bidrager til samfundet på andre måder end det rent økonomiske mellemværende med staten.  Resultatet er baseret på gennemsnitsoplysninger om træk på offentligt forbrug og indkomstoverførsler ud fra de få oplysninger, du har angivet. Så du kan både være en bedre og dårligere forretning for de offentlige kasser, end resultatet viser. Du kan f.eks. have været i gang med flere uddannelser eller fået dyr behandling for alvorlig sygdom end en gennemsnitsperson med samme køn, alder og uddannelse. ";
    text4 += "Beregningerne siger ligeledes ikke noget om, hvor meget en person med lignende uddannelsesniveau mv. bidrager til de offentlige finanser, hvis personen indvandrer til Danmark. Derudover er beregningerne foretaget under antagelse af, at man gennemlever hele sit liv med den nuværende indretning af skatte- og overførselssystem m.v.</p>";
    text4 += "<p class=\"dbs-small\">Beregningen er udført ud fra baggrundsdata mv. venligst stillet til rådighed af <a href=\"http://www.da.dk\" target=\"_blank\">DA</a> og <a href=\"http://www.dreammodel.dk\" target=\"_blank\">DREAM</a> og sammenstillet af konsulent Thomas Thomsen. Du kan læse mere om beregningsmetoder og -forudsætninger <a href=\"http://www.b.dk/nationalt/beregningsmetoder-og-forudsaetninger\" target=\"_blank\">her</a>.</p>";
    document.getElementById("p2").innerHTML += text4;


  }

  // ===============================================
  // =============== OUTPUT SLUT ===================
  // ===============================================

  document.getElementById("form").style.display = "none";
  document.getElementById("dbs-header").style.display = "none";
  document.getElementById("dbs-desc").style.display = "none";
  document.getElementById("udfold").style.display = "block";
  document.getElementById("result").style.display = "block";

  location.hash = "#dbs-top";

  return nettobidrag;
}
